// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package googlephonelib.actions;

import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * Check whether a phone number is a possible number. It provides a more lenient check than isValidNumber(com.google.i18n.phonenumbers.Phonenumber.PhoneNumber) in the following sense:
 * It only checks the length of phone numbers. In particular, it doesn't check starting digits of the number.
 * It doesn't attempt to figure out the type of the number, but uses general rules which applies to all types of phone numbers in a region. Therefore, it is much faster than isValidNumber.
 * For fixed line numbers, many regions have the concept of area code, which together with subscriber number constitute the national significant number. It is sometimes okay to dial the subscriber number only when dialing in the same area. This function will return true if the subscriber-number-only version is passed in. On the other hand, because isValidNumber validates using information on both starting digits (for fixed line numbers, that would most likely be area codes) and length (obviously includes the length of area codes for fixed line numbers), it will return false for the subscriber-number-only version.
 */
public class PhonenumberPossible extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String inputString;
	private java.lang.String region;

	public PhonenumberPossible(IContext context, java.lang.String inputString, java.lang.String region)
	{
		super(context);
		this.inputString = inputString;
		this.region = region;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
		return phoneUtil.isPossibleNumber((CharSequence)inputString, region);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PhonenumberPossible";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
